Pipex

int     main(int ac, char *av[], char *envp[])
{
    int     fd[2];                  // File descriptor // 0 = Read end // 1 = Write end
    pid_t   pid;                    // signed integer type which is capable of representing a process ID

    if(ac == 5) 
    {
        pipe(fd);                    //connects both fds to the pipe
        if(pipe(fd) == -1)
            perror("pipe failed");
        pid = fork();                //assign a process id to each process (parent process / child process = 0)
        if(pid == -1)
        {
            perror("fork failed");
            close_fd(fd);
        }    
        else if(pid == 0)         // we are on the child process (second_process) 
            second_process(av, fd, envp);  //after running will leave the info in the pipe.    
        main_process(av, fd, envp);  
    }
    else
    {
        ft_printf("Error. Try using : ./pipex file1 cmd1 cmd2 file2\n");
        exit (WRONG_AC);
    }
    return 0;
}

if pid ==  0 (we are on the second process or child process)
  We run second_process that will open the file1 with read only and work with av[2]
    Second_Process:
      Then dup2 fd[1] stdout (writes on the pipe) and dup2 fd_nb (gets info from file1 and not keyboard).
      Finaly with ft_cmd  we split av2 : (exemple 'ls -l' becomes 'ls' '-l')
      We find the path for cmd[0] in the exemple 'ls'
        find_dir :
          look for path= in envp
          skip the "path=" part with split
           join "/" to it to be easier to look for the folder
           we assing path to be a strjoin of the half_path + the cmd name (ls)
           check if its valid and if it is its returned  while freeing the full_path.  Else we just free everything.
           we have the dirrect path for the folder that contain the cmd (ls)
      We assign our variable path to the "path of cmd" (after using find_dir)
      If execve != -1 we run the command
  We run first_process that will open the file2 with write and work with av[3]
     First_Process:
      Repeat 
It will print on the file2 the expected output from the commands and whats in the file1.

